# -*- coding: utf-8 -*-
"""
Created on Mon Sep 03 08:51:15 2024

@author: arugo
"""

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7eda2931",
   "metadata": {},
   "source": [
    "# Predicting delivery time using sorting time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64fb9b8c",
   "metadata": {},
   "source": [
    "# Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "66189d5e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.809804Z",
     "start_time": "2022-11-23T10:33:28.358812Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f8791520",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.845536Z",
     "start_time": "2022-11-23T10:33:31.813818Z"
    }
   },
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"delivery_time.csv\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ae66fe12",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.863035Z",
     "start_time": "2022-11-23T10:33:31.849450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21, 2)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "955faa12",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.893281Z",
     "start_time": "2022-11-23T10:33:31.866074Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>21.000000</td>\n",
       "      <td>21.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>16.790952</td>\n",
       "      <td>6.190476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.074901</td>\n",
       "      <td>2.542028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>13.500000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>17.830000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>19.750000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Delivery Time  Sorting Time\n",
       "count      21.000000     21.000000\n",
       "mean       16.790952      6.190476\n",
       "std         5.074901      2.542028\n",
       "min         8.000000      2.000000\n",
       "25%        13.500000      4.000000\n",
       "50%        17.830000      6.000000\n",
       "75%        19.750000      8.000000\n",
       "max        29.000000     10.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "57e2a712",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.908570Z",
     "start_time": "2022-11-23T10:33:31.896282Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery Time  Sorting Time\n",
       "0           21.00            10\n",
       "1           13.50             4\n",
       "2           19.75             6\n",
       "3           24.00             9\n",
       "4           29.00            10\n",
       "5           15.35             6\n",
       "6           19.00             7\n",
       "7            9.50             3\n",
       "8           17.90            10\n",
       "9           18.75             9\n",
       "10          19.83             8\n",
       "11          10.75             4\n",
       "12          16.68             7\n",
       "13          11.50             3\n",
       "14          12.03             3\n",
       "15          14.88             4\n",
       "16          13.75             6\n",
       "17          18.11             7\n",
       "18           8.00             2\n",
       "19          17.83             7\n",
       "20          21.50             5"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a88f0f97",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.932374Z",
     "start_time": "2022-11-23T10:33:31.911776Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21 entries, 0 to 20\n",
      "Data columns (total 2 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Delivery Time  21 non-null     float64\n",
      " 1   Sorting Time   21 non-null     int64  \n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 464.0 bytes\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ea557a63",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:33:31.954109Z",
     "start_time": "2022-11-23T10:33:31.935550Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Delivery Time', 'Sorting Time'], dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0416cbb7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:02.622310Z",
     "start_time": "2022-11-23T10:37:02.613428Z"
    }
   },
   "outputs": [],
   "source": [
    "data.rename(columns={'Delivery Time':'DeliveryTime','Sorting Time':'SortingTime'},inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "909fed06",
   "metadata": {},
   "source": [
    "# Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ed582d27",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:14.721608Z",
     "start_time": "2022-11-23T10:37:14.577428Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(data.DeliveryTime)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fd122023",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:14.913482Z",
     "start_time": "2022-11-23T10:37:14.725665Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXkAAAD4CAYAAAAJmJb0AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAPnElEQVR4nO3dX4gd533G8e8TVSGhMSittrWQtN7Q6iY29R8WxSaliJCC/1G1xS0yNE59o9o44ECgdXPhJL1ySxuKrWChNiY2DQkGB1fEMsHQmNgXciKpsmJFCRXBrbcWkWITKcImQcmvFztJtsdnd+fsHunIr74fGHbmnffM/PR6eBjPmTmTqkKS1KZ3TLoASdL5Y8hLUsMMeUlqmCEvSQ0z5CWpYb82qR2vX7++ZmZmJrV7SXpbOnjw4A+raqpv/4mF/MzMDAcOHJjU7iXpbSnJf4/S38s1ktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWG9Qz7JmiT/meSrQ9YlyYNJjic5kuS68ZYpSVqJUc7k7wWOLbLuJmBLN+0EHl5lXZKkMegV8kk2AbcA/7pIl+3AYzVvP7AuyYYx1ShJWqG+T7z+M/DXwGWLrN8IvLJgea5rO7GwU5KdzJ/pMz09PUqdugTN3PfUpEu44F5+4JZJl6DGLHsmn+RW4GRVHVyq25C2t7xyqqr2VNVsVc1OTfX+6QVJ0gr1uVzzQeCPkrwMfBn4UJJ/G+gzB2xesLwJeHUsFUqSVmzZkK+qv62qTVU1A+wA/qOq/mKg217gju4um+uB01V1YnBbkqQLa8W/QpnkLoCq2g3sA24GjgNvAHeOpTpJ0qqMFPJV9SzwbDe/e0F7AfeMszBJ0ur5xKskNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWF9XuT9riTfTPJikqNJPjOkz7Ykp5Mc7qb7z0+5kqRR9Hkz1E+AD1XV2SRrgeeTPF1V+wf6PVdVt46/REnSSi0b8t2r/c52i2u7qc5nUZKk8eh1TT7JmiSHgZPAM1X1wpBuN3SXdJ5OcuU4i5QkrUyvkK+qn1XVNcAmYGuSqwa6HAKuqKqrgYeAJ4dtJ8nOJAeSHDh16tTKq5Yk9TLS3TVV9SPgWeDGgfYzVXW2m98HrE2yfsjn91TVbFXNTk1NrbhoSVI/fe6umUqyrpt/N/Bh4LsDfS5Pkm5+a7fd18ZerSRpJH3urtkAPJpkDfPh/XhVfTXJXQBVtRu4Dbg7yTngTWBH94WtJGmC+txdcwS4dkj77gXzu4Bd4y1NkrRaPvEqSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDevzjtd3JflmkheTHE3ymSF9kuTBJMeTHEly3fkpV5I0ij7veP0J8KGqOptkLfB8kqerav+CPjcBW7rpA8DD3V9J0gQteyZf8852i2u7afAl3duBx7q++4F1STaMt1RJ0qj6nMmTZA1wEPhd4HNV9cJAl43AKwuW57q2EwPb2QnsBJienl5hyZM1c99TE9nvyw/cMpH9Snp76/XFa1X9rKquATYBW5NcNdAlwz42ZDt7qmq2qmanpqZGLlaSNJqR7q6pqh8BzwI3DqyaAzYvWN4EvLqawiRJq9fn7pqpJOu6+XcDHwa+O9BtL3BHd5fN9cDpqjqBJGmi+lyT3wA82l2XfwfweFV9NcldAFW1G9gH3AwcB94A7jxP9UqSRrBsyFfVEeDaIe27F8wXcM94S5MkrZZPvEpSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LD+rzjdXOSryc5luRoknuH9NmW5HSSw910//kpV5I0ij7veD0HfKKqDiW5DDiY5Jmq+s5Av+eq6tbxlyhJWqllz+Sr6kRVHermfwwcAzae78IkSas30jX5JDPMv9T7hSGrb0jyYpKnk1y5yOd3JjmQ5MCpU6dGr1aSNJLeIZ/kPcATwMer6szA6kPAFVV1NfAQ8OSwbVTVnqqararZqampFZYsSeqrV8gnWct8wH+xqr4yuL6qzlTV2W5+H7A2yfqxVipJGlmfu2sCfB44VlWfXaTP5V0/kmzttvvaOAuVJI2uz901HwQ+Anw7yeGu7ZPANEBV7QZuA+5Ocg54E9hRVTX+ciVJo1g25KvqeSDL9NkF7BpXUZKk8fCJV0lqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWpYn3e8bk7y9STHkhxNcu+QPknyYJLjSY4kue78lCtJGkWfd7yeAz5RVYeSXAYcTPJMVX1nQZ+bgC3d9AHg4e6vJGmClj2Tr6oTVXWom/8xcAzYONBtO/BYzdsPrEuyYezVSpJG0udM/peSzADXAi8MrNoIvLJgea5rOzHw+Z3AToDp6ekRS/2VmfueWvFn364uxX/zpWhS/51ffuCWiexX51/vL16TvAd4Avh4VZ0ZXD3kI/WWhqo9VTVbVbNTU1OjVSpJGlmvkE+ylvmA/2JVfWVIlzlg84LlTcCrqy9PkrQafe6uCfB54FhVfXaRbnuBO7q7bK4HTlfViUX6SpIukD7X5D8IfAT4dpLDXdsngWmAqtoN7ANuBo4DbwB3jr1SSdLIlg35qnqe4dfcF/Yp4J5xFSVJGg+feJWkhhnyktQwQ16SGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SG9XnH6yNJTiZ5aZH125KcTnK4m+4ff5mSpJXo847XLwC7gMeW6PNcVd06lookSWOz7Jl8VX0DeP0C1CJJGrNxXZO/IcmLSZ5OcuVinZLsTHIgyYFTp06NadeSpMWMI+QPAVdU1dXAQ8CTi3Wsqj1VNVtVs1NTU2PYtSRpKasO+ao6U1Vnu/l9wNok61ddmSRp1VYd8kkuT5Jufmu3zddWu11J0uote3dNki8B24D1SeaATwFrAapqN3AbcHeSc8CbwI6qqvNWsSSpt2VDvqpuX2b9LuZvsZQkXWR84lWSGmbIS1LDDHlJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIatmzIJ3kkyckkLy2yPkkeTHI8yZEk142/TEnSSvQ5k/8CcOMS628CtnTTTuDh1ZclSRqHZUO+qr4BvL5El+3AYzVvP7AuyYZxFShJWrllX+Tdw0bglQXLc13bicGOSXYyf7bP9PT0GHYtaRxm7ntqYvt++YFbJrLfS+XfPI4vXjOkrYZ1rKo9VTVbVbNTU1Nj2LUkaSnjCPk5YPOC5U3Aq2PYriRplcYR8nuBO7q7bK4HTlfVWy7VSJIuvGWvySf5ErANWJ9kDvgUsBagqnYD+4CbgePAG8Cd56tYSdJolg35qrp9mfUF3DO2iiRJY+MTr5LUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDXMkJekhhnyktSwXiGf5MYk30tyPMl9Q9ZvS3I6yeFuun/8pUqSRtXnHa9rgM8BfwjMAd9KsreqvjPQ9bmquvU81ChJWqE+Z/JbgeNV9f2q+inwZWD7+S1LkjQOfUJ+I/DKguW5rm3QDUleTPJ0kiuHbSjJziQHkhw4derUCsqVJI2iT8hnSFsNLB8Crqiqq4GHgCeHbaiq9lTVbFXNTk1NjVSoJGl0fUJ+Dti8YHkT8OrCDlV1pqrOdvP7gLVJ1o+tSknSivQJ+W8BW5K8L8k7gR3A3oUdklyeJN381m67r427WEnSaJa9u6aqziX5GPA1YA3wSFUdTXJXt343cBtwd5JzwJvAjqoavKQjSbrAlg15+OUlmH0DbbsXzO8Cdo23NEnSavnEqyQ1zJCXpIYZ8pLUMENekhpmyEtSwwx5SWqYIS9JDTPkJalhhrwkNcyQl6SGGfKS1DBDXpIaZshLUsMMeUlqmCEvSQ0z5CWpYYa8JDWsV8gnuTHJ95IcT3LfkPVJ8mC3/kiS68ZfqiRpVMuGfJI1wOeAm4D3A7cnef9At5uALd20E3h4zHVKklagz5n8VuB4VX2/qn4KfBnYPtBnO/BYzdsPrEuyYcy1SpJG1OdF3huBVxYszwEf6NFnI3BiYackO5k/0wc4m+R7I1U7WeuBH066iIucY7Q0x2eI/P3/W7wkxmjg3zyK9cAVo3ygT8hnSFutoA9VtQfY02OfF50kB6pqdtJ1XMwco6U5PstzjJbWjc/MKJ/pc7lmDti8YHkT8OoK+kiSLrA+If8tYEuS9yV5J7AD2DvQZy9wR3eXzfXA6ao6MbghSdKFtezlmqo6l+RjwNeANcAjVXU0yV3d+t3APuBm4DjwBnDn+St5Yt6Wl5kuMMdoaY7P8hyjpY08Pql6y6VzSVIjfOJVkhpmyEtSwwz5IZI8kuRkkpcWtP1GkmeS/Ff3972TrHHSFhmjTyf53ySHu+nmSdY4SUk2J/l6kmNJjia5t2v3OGLJ8fEY6iR5V5JvJnmxG6PPdO0jHUNekx8iyR8AZ5l/iveqru0fgNer6oHu93veW1V/M8k6J2mRMfo0cLaq/nGStV0Muie+N1TVoSSXAQeBPwb+Eo+jpcbnz/EYAuZ/Ewz49ao6m2Qt8DxwL/CnjHAMeSY/RFV9A3h9oHk78Gg3/yjzB+Qla5ExUqeqTlTVoW7+x8Ax5p8C9zhiyfFRp/uZmLPd4tpuKkY8hgz5/n77F/f+d39/a8L1XKw+1v0S6SOX6qWIQUlmgGuBF/A4eouB8QGPoV9KsibJYeAk8ExVjXwMGfIap4eB3wGuYf53i/5potVcBJK8B3gC+HhVnZl0PRebIePjMbRAVf2sqq5h/lcEtia5atRtGPL9/eAXv6zZ/T054XouOlX1g+6g/DnwL8z/guklq7uO+gTwxar6StfscdQZNj4eQ8NV1Y+AZ4EbGfEYMuT72wt8tJv/KPDvE6zlojTw89J/Ary0WN/WdV+afR44VlWfXbDK44jFx8dj6FeSTCVZ182/G/gw8F1GPIa8u2aIJF8CtjH/s54/AD4FPAk8DkwD/wP8WVVdsl88LjJG25j/3+wCXgb+6lL9DaMkvw88B3wb+HnX/Enmrztf8sfREuNzOx5DACT5Pea/WF3D/An541X1d0l+kxGOIUNekhrm5RpJapghL0kNM+QlqWGGvCQ1zJCXpIYZ8pLUMENekhr2fx52qLIzrrA6AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data.DeliveryTime) \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "583b0805",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:15.105910Z",
     "start_time": "2022-11-23T10:37:14.916485Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data.SortingTime) \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "72598c8b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:15.121769Z",
     "start_time": "2022-11-23T10:37:15.110078Z"
    }
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a7843ec3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:15.930251Z",
     "start_time": "2022-11-23T10:37:15.126343Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='SortingTime', ylabel='Density'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['SortingTime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f0f35098",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:16.169651Z",
     "start_time": "2022-11-23T10:37:15.933458Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='DeliveryTime', ylabel='Density'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['DeliveryTime'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "461ae8c8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:16.402519Z",
     "start_time": "2022-11-23T10:37:16.172789Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sorting Time')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data.DeliveryTime,data.SortingTime, \"bo\") \n",
    "plt.xlabel(\"Delivery Time\")\n",
    "plt.ylabel(\"Sorting Time\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "89303602",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:16.724485Z",
     "start_time": "2022-11-23T10:37:16.406024Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.regplot(x=\"DeliveryTime\", y=\"SortingTime\", data=data);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a3714e52",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:16.749513Z",
     "start_time": "2022-11-23T10:37:16.726422Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DeliveryTime</th>\n",
       "      <th>SortingTime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DeliveryTime</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.825997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SortingTime</th>\n",
       "      <td>0.825997</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              DeliveryTime  SortingTime\n",
       "DeliveryTime      1.000000     0.825997\n",
       "SortingTime       0.825997     1.000000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Correlation\n",
    "data.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d09b9e39",
   "metadata": {},
   "source": [
    "# 1st Model (linear)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0d4b5aa9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.116311Z",
     "start_time": "2022-11-23T10:37:16.755824Z"
    }
   },
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf\n",
    "model=smf.ols(\"SortingTime~DeliveryTime\",data=data).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2716fe67",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.162993Z",
     "start_time": "2022-11-23T10:37:17.118775Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>SortingTime</td>   <th>  R-squared:         </th> <td>   0.682</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.666</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   40.80</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 23 Nov 2022</td> <th>  Prob (F-statistic):</th> <td>3.98e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:07:17</td>     <th>  Log-Likelihood:    </th> <td> -36.839</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   77.68</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   79.77</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>    <td>   -0.7567</td> <td>    1.134</td> <td>   -0.667</td> <td> 0.513</td> <td>   -3.130</td> <td>    1.617</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>DeliveryTime</th> <td>    0.4137</td> <td>    0.065</td> <td>    6.387</td> <td> 0.000</td> <td>    0.278</td> <td>    0.549</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.409</td> <th>  Durbin-Watson:     </th> <td>   1.346</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.494</td> <th>  Jarque-Bera (JB):  </th> <td>   0.371</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.255</td> <th>  Prob(JB):          </th> <td>   0.831</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.405</td> <th>  Cond. No.          </th> <td>    62.1</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            SortingTime   R-squared:                       0.682\n",
       "Model:                            OLS   Adj. R-squared:                  0.666\n",
       "Method:                 Least Squares   F-statistic:                     40.80\n",
       "Date:                Wed, 23 Nov 2022   Prob (F-statistic):           3.98e-06\n",
       "Time:                        16:07:17   Log-Likelihood:                -36.839\n",
       "No. Observations:                  21   AIC:                             77.68\n",
       "Df Residuals:                      19   BIC:                             79.77\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "================================================================================\n",
       "                   coef    std err          t      P>|t|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------\n",
       "Intercept       -0.7567      1.134     -0.667      0.513      -3.130       1.617\n",
       "DeliveryTime     0.4137      0.065      6.387      0.000       0.278       0.549\n",
       "==============================================================================\n",
       "Omnibus:                        1.409   Durbin-Watson:                   1.346\n",
       "Prob(Omnibus):                  0.494   Jarque-Bera (JB):                0.371\n",
       "Skew:                           0.255   Prob(JB):                        0.831\n",
       "Kurtosis:                       3.405   Cond. No.                         62.1\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "47dd0b03",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.188048Z",
     "start_time": "2022-11-23T10:37:17.166086Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept      -0.756673\n",
       "DeliveryTime    0.413744\n",
       "dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b6499d7a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.203262Z",
     "start_time": "2022-11-23T10:37:17.191075Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept      -0.667290\n",
      "DeliveryTime    6.387447\n",
      "dtype: float64 \n",
      " Intercept       0.512611\n",
      "DeliveryTime    0.000004\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(model.tvalues, '\\n', model.pvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d4698b65",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.219717Z",
     "start_time": "2022-11-23T10:37:17.207533Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.6822714748417231, 0.6655489208860244)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(model.rsquared,model.rsquared_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8e5d9a75",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.254586Z",
     "start_time": "2022-11-23T10:37:17.222928Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      7.931943\n",
       "1      4.828866\n",
       "2      7.414763\n",
       "3      9.173174\n",
       "4     11.241892\n",
       "5      5.594291\n",
       "6      7.104456\n",
       "7      3.173891\n",
       "8      6.649338\n",
       "9      7.001020\n",
       "10     7.447863\n",
       "11     3.691071\n",
       "12     6.144570\n",
       "13     4.001378\n",
       "14     4.220662\n",
       "15     5.399832\n",
       "16     4.932302\n",
       "17     6.736224\n",
       "18     2.553276\n",
       "19     6.620376\n",
       "20     8.138815\n",
       "dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred = model.predict(data.DeliveryTime)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "71a01b5e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.269693Z",
     "start_time": "2022-11-23T10:37:17.257796Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     2.068057\n",
       "1    -0.828866\n",
       "2    -1.414763\n",
       "3    -0.173174\n",
       "4    -1.241892\n",
       "5     0.405709\n",
       "6    -0.104456\n",
       "7    -0.173891\n",
       "8     3.350662\n",
       "9     1.998980\n",
       "10    0.552137\n",
       "11    0.308929\n",
       "12    0.855430\n",
       "13   -1.001378\n",
       "14   -1.220662\n",
       "15   -1.399832\n",
       "16    1.067698\n",
       "17    0.263776\n",
       "18   -0.553276\n",
       "19    0.379624\n",
       "20   -3.138815\n",
       "dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f281bae4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.287953Z",
     "start_time": "2022-11-23T10:37:17.273025Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1.40674689, -0.56381619, -0.9623592 , -0.11779731, -0.8447675 ,\n",
       "        0.27597371, -0.07105342, -0.1182853 ,  2.27920872,  1.35975901,\n",
       "        0.37557826,  0.21014188,  0.58188575, -0.6811639 , -0.83032673,\n",
       "       -0.95220243,  0.72627659,  0.17942755, -0.37635266,  0.25823056,\n",
       "       -2.13510428])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "90c46957",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.302994Z",
     "start_time": "2022-11-23T10:37:17.291898Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.99092151473798"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_lin = np.sqrt(np.mean((np.array(data['DeliveryTime'])-np.array(pred))**2)) \n",
    "rmse_lin"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a60c4e2",
   "metadata": {},
   "source": [
    "# 2nd model (logarithmic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "0c350d34",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.334958Z",
     "start_time": "2022-11-23T10:37:17.306442Z"
    }
   },
   "outputs": [],
   "source": [
    "model2 = smf.ols('DeliveryTime~np.log(SortingTime)',data=data).fit() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "64ab866c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.361646Z",
     "start_time": "2022-11-23T10:37:17.338210Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>      <td>DeliveryTime</td>   <th>  R-squared:         </th> <td>   0.695</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.679</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   43.39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 23 Nov 2022</td> <th>  Prob (F-statistic):</th> <td>2.64e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:07:17</td>     <th>  Log-Likelihood:    </th> <td> -50.912</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>   105.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>   107.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "           <td></td>              <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>           <td>    1.1597</td> <td>    2.455</td> <td>    0.472</td> <td> 0.642</td> <td>   -3.978</td> <td>    6.297</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>np.log(SortingTime)</th> <td>    9.0434</td> <td>    1.373</td> <td>    6.587</td> <td> 0.000</td> <td>    6.170</td> <td>   11.917</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 5.552</td> <th>  Durbin-Watson:     </th> <td>   1.427</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.062</td> <th>  Jarque-Bera (JB):  </th> <td>   3.481</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.946</td> <th>  Prob(JB):          </th> <td>   0.175</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.628</td> <th>  Cond. No.          </th> <td>    9.08</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:           DeliveryTime   R-squared:                       0.695\n",
       "Model:                            OLS   Adj. R-squared:                  0.679\n",
       "Method:                 Least Squares   F-statistic:                     43.39\n",
       "Date:                Wed, 23 Nov 2022   Prob (F-statistic):           2.64e-06\n",
       "Time:                        16:07:17   Log-Likelihood:                -50.912\n",
       "No. Observations:                  21   AIC:                             105.8\n",
       "Df Residuals:                      19   BIC:                             107.9\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "=======================================================================================\n",
       "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
       "---------------------------------------------------------------------------------------\n",
       "Intercept               1.1597      2.455      0.472      0.642      -3.978       6.297\n",
       "np.log(SortingTime)     9.0434      1.373      6.587      0.000       6.170      11.917\n",
       "==============================================================================\n",
       "Omnibus:                        5.552   Durbin-Watson:                   1.427\n",
       "Prob(Omnibus):                  0.062   Jarque-Bera (JB):                3.481\n",
       "Skew:                           0.946   Prob(JB):                        0.175\n",
       "Kurtosis:                       3.628   Cond. No.                         9.08\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f46ac8fd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.390217Z",
     "start_time": "2022-11-23T10:37:17.363704Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21.982913\n",
       "1     13.696517\n",
       "2     17.363305\n",
       "3     21.030094\n",
       "4     21.982913\n",
       "5     17.363305\n",
       "6     18.757354\n",
       "7     11.094889\n",
       "8     21.982913\n",
       "9     21.030094\n",
       "10    19.964933\n",
       "11    13.696517\n",
       "12    18.757354\n",
       "13    11.094889\n",
       "14    11.094889\n",
       "15    13.696517\n",
       "16    17.363305\n",
       "17    18.757354\n",
       "18     7.428100\n",
       "19    18.757354\n",
       "20    15.714496\n",
       "dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred2 = model2.predict(pd.DataFrame(data['SortingTime'])) \n",
    "pred2 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "33ca9fb6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.416244Z",
     "start_time": "2022-11-23T10:37:17.394925Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    -0.982913\n",
       "1    -0.196517\n",
       "2     2.386695\n",
       "3     2.969906\n",
       "4     7.017087\n",
       "5    -2.013305\n",
       "6     0.242646\n",
       "7    -1.594889\n",
       "8    -4.082913\n",
       "9    -2.280094\n",
       "10   -0.134933\n",
       "11   -2.946517\n",
       "12   -2.077354\n",
       "13    0.405111\n",
       "14    0.935111\n",
       "15    1.183483\n",
       "16   -3.613305\n",
       "17   -0.647354\n",
       "18    0.571900\n",
       "19   -0.927354\n",
       "20    5.785504\n",
       "dtype: float64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d71f4b82",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.431401Z",
     "start_time": "2022-11-23T10:37:17.420581Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.34207012, -0.06839109,  0.83061001,  1.0335774 ,  2.44206469,\n",
       "       -0.70066414,  0.08444506, -0.55504813, -1.42092236, -0.79351107,\n",
       "       -0.046959  , -1.02543743, -0.72295404,  0.14098557,  0.3254345 ,\n",
       "        0.41187217, -1.2574911 , -0.22528994,  0.19903082, -0.32273466,\n",
       "        2.01345289])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "306a5353",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.446687Z",
     "start_time": "2022-11-23T10:37:17.434731Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.749542066249479"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_log = np.sqrt(np.mean((np.array(data['SortingTime'])-np.array(pred2))**2))\n",
    "rmse_log "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8cb3301f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.465500Z",
     "start_time": "2022-11-23T10:37:17.449738Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9774469985241834"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred2.corr(data.SortingTime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4c8782f0",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.857616Z",
     "start_time": "2022-11-23T10:37:17.468611Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'DeliveryTime')"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=data['SortingTime'],y=data['DeliveryTime'],color='green')\n",
    "plt.plot(data['SortingTime'],pred2,color='blue')\n",
    "plt.xlabel('SortingTime')\n",
    "plt.ylabel('DeliveryTime')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1628ef31",
   "metadata": {},
   "source": [
    "# 3rd model (exponential)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c35057cd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.885320Z",
     "start_time": "2022-11-23T10:37:17.860684Z"
    }
   },
   "outputs": [],
   "source": [
    "model3 = smf.ols('np.log(DeliveryTime)~SortingTime',data=data).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d689e14d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.912359Z",
     "start_time": "2022-11-23T10:37:17.891948Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>np.log(DeliveryTime)</td> <th>  R-squared:         </th> <td>   0.711</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.696</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   46.73</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>               <td>Wed, 23 Nov 2022</td>   <th>  Prob (F-statistic):</th> <td>1.59e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                   <td>16:07:17</td>       <th>  Log-Likelihood:    </th> <td>  7.7920</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>        <td>    21</td>        <th>  AIC:               </th> <td>  -11.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>            <td>    19</td>        <th>  BIC:               </th> <td>  -9.495</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                <td>     1</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td>    2.1214</td> <td>    0.103</td> <td>   20.601</td> <td> 0.000</td> <td>    1.906</td> <td>    2.337</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>SortingTime</th> <td>    0.1056</td> <td>    0.015</td> <td>    6.836</td> <td> 0.000</td> <td>    0.073</td> <td>    0.138</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.238</td> <th>  Durbin-Watson:     </th> <td>   1.325</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.538</td> <th>  Jarque-Bera (JB):  </th> <td>   0.544</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.393</td> <th>  Prob(JB):          </th> <td>   0.762</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 3.067</td> <th>  Cond. No.          </th> <td>    18.3</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             OLS Regression Results                             \n",
       "================================================================================\n",
       "Dep. Variable:     np.log(DeliveryTime)   R-squared:                       0.711\n",
       "Model:                              OLS   Adj. R-squared:                  0.696\n",
       "Method:                   Least Squares   F-statistic:                     46.73\n",
       "Date:                  Wed, 23 Nov 2022   Prob (F-statistic):           1.59e-06\n",
       "Time:                          16:07:17   Log-Likelihood:                 7.7920\n",
       "No. Observations:                    21   AIC:                            -11.58\n",
       "Df Residuals:                        19   BIC:                            -9.495\n",
       "Df Model:                             1                                         \n",
       "Covariance Type:              nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept       2.1214      0.103     20.601      0.000       1.906       2.337\n",
       "SortingTime     0.1056      0.015      6.836      0.000       0.073       0.138\n",
       "==============================================================================\n",
       "Omnibus:                        1.238   Durbin-Watson:                   1.325\n",
       "Prob(Omnibus):                  0.538   Jarque-Bera (JB):                0.544\n",
       "Skew:                           0.393   Prob(JB):                        0.762\n",
       "Kurtosis:                       3.067   Cond. No.                         18.3\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1680f639",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.928364Z",
     "start_time": "2022-11-23T10:37:17.915588Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     3.176888\n",
       "1     2.543578\n",
       "2     2.754681\n",
       "3     3.071336\n",
       "4     3.176888\n",
       "5     2.754681\n",
       "6     2.860233\n",
       "7     2.438027\n",
       "8     3.176888\n",
       "9     3.071336\n",
       "10    2.965785\n",
       "11    2.543578\n",
       "12    2.860233\n",
       "13    2.438027\n",
       "14    2.438027\n",
       "15    2.543578\n",
       "16    2.754681\n",
       "17    2.860233\n",
       "18    2.332475\n",
       "19    2.860233\n",
       "20    2.649130\n",
       "dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_log = model3.predict(pd.DataFrame(data['SortingTime'])) \n",
    "pred_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "cd8d4b05",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.943684Z",
     "start_time": "2022-11-23T10:37:17.930552Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     23.972032\n",
       "1     12.725123\n",
       "2     15.716034\n",
       "3     21.570707\n",
       "4     23.972032\n",
       "5     15.716034\n",
       "6     17.465597\n",
       "7     11.450423\n",
       "8     23.972032\n",
       "9     21.570707\n",
       "10    19.409927\n",
       "11    12.725123\n",
       "12    17.465597\n",
       "13    11.450423\n",
       "14    11.450423\n",
       "15    12.725123\n",
       "16    15.716034\n",
       "17    17.465597\n",
       "18    10.303411\n",
       "19    17.465597\n",
       "20    14.141728\n",
       "dtype: float64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred3=np.exp(pred_log)\n",
    "pred3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7eceb8d1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.970252Z",
     "start_time": "2022-11-23T10:37:17.947738Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    -0.132365\n",
       "1     0.059111\n",
       "2     0.228472\n",
       "3     0.106718\n",
       "4     0.190408\n",
       "5    -0.023566\n",
       "6     0.084206\n",
       "7    -0.186735\n",
       "8    -0.292087\n",
       "9    -0.140142\n",
       "10    0.021411\n",
       "11   -0.168672\n",
       "12   -0.046023\n",
       "13    0.004320\n",
       "14    0.049377\n",
       "15    0.156440\n",
       "16   -0.133643\n",
       "17    0.036231\n",
       "18   -0.253034\n",
       "19    0.020649\n",
       "20    0.418923\n",
       "dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d9d0685f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:17.985806Z",
     "start_time": "2022-11-23T10:37:17.973720Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.75408795,  0.33675889,  1.3016092 ,  0.60797197,  1.08475764,\n",
       "       -0.13425573,  0.47972269, -1.06383166, -1.66402537, -0.79839415,\n",
       "        0.12198057, -0.9609301 , -0.26219179,  0.02461332,  0.28130094,\n",
       "        0.89124014, -0.7613643 ,  0.20640995, -1.44153627,  0.11763994,\n",
       "        2.38661208])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "abddac08",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.002011Z",
     "start_time": "2022-11-23T10:37:17.989209Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.940250323056201"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_exp = np.sqrt(np.mean((np.array(data['DeliveryTime'])-np.array(pred3))**2)) \n",
    "rmse_exp "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "924d6ea7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.221895Z",
     "start_time": "2022-11-23T10:37:18.004563Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'DeliveryTime')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=data['SortingTime'],y=data['DeliveryTime'],color='green')\n",
    "plt.plot(data.SortingTime,pred3,color='blue')\n",
    "plt.xlabel('SortingTime')\n",
    "plt.ylabel('DeliveryTime')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "47f23ae7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.237565Z",
     "start_time": "2022-11-23T10:37:18.224911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8085780108289262"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred3.corr(data.DeliveryTime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "e01e28e8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.400464Z",
     "start_time": "2022-11-23T10:37:18.240661Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Standardized Residual')"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(model3.resid_pearson,'o')\n",
    "plt.axhline(y=0,color='green')\n",
    "plt.xlabel(\"Observation Number\")\n",
    "plt.ylabel(\"Standardized Residual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "296b6a9a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.564504Z",
     "start_time": "2022-11-23T10:37:18.402471Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Actual')"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX4AAAEGCAYAAABiq/5QAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAU+ElEQVR4nO3dfZBddX3H8fe3IehCwRBYKARslEJaByuhKyWmUgQ1oFRT+wSTdmxtE7Wtj22qtE6ZdjrTahyrYztqgrZ0jNSnEK22BkpFNBOomwQMBVOaimCCZm2MIm5rCN/+cc/CcrPP2XvOvft7v2Z29tzfPTnnk52cT86eex4iM5EkleNHmg4gSaqXxS9JhbH4JakwFr8kFcbil6TCHNN0gKk45ZRTcvHixU3HkKSesn379m9nZn/7eE8U/+LFixkcHGw6hiT1lIj4+ljjHuqRpMJY/JJUGItfkgpj8UtSYSx+SSpMx87qiYgPAVcC+zPzvGpsIfBRYDFwP/CrmfmdTmWQpF61asM2tu458Pjr5WcvZOPqZbOy7E7u8f89cHnb2FuBWzLzHOCW6rUkaZT20gfYuucAqzZsm5Xld6z4M/M24EDb8MuB66vp64GVnVq/JPWq9tKfbHy66j7Gf1pmPgRQfT91vBkjYk1EDEbE4NDQUG0BJWmu69oPdzNzfWYOZOZAf/8RVxxLkmao7uL/VkScDlB931/z+iWp6y0/e+G0xqer7uL/NPDKavqVwKdqXr8kdb2Nq5cdUfKzeVZPJ0/nvAG4BDglIr4BXAv8FfCxiPht4AHgVzq1fknqZbNV8mPpWPFn5tXjvHVZp9YpSZpc1364K0nqDItfkgpj8UtSYSx+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IKY/FLUmEsfkkqjMUvSYWx+CWpMBa/JBXG4pekwnTsQSwTiYg3AKuBADZk5rubyCGp971t8y5uuONBDmcyL4Krf/Ys/mLls5uO1dVq3+OPiPNolf6FwHOAKyPinLpzSOp9b9u8iw/f/gCHMwE4nMmHb3+At23e1XCy7tbEoZ6fAm7PzB9k5qPAF4BfbCCHpB53wx0PTmtcLU0U/93AxRFxckQcB7wEOKt9pohYExGDETE4NDRUe0hJ3W9kT3+q42qpvfgz817g7cDNwOeAu4BHx5hvfWYOZOZAf39/zSkl9YJ5EdMaV0sjZ/Vk5gcz84LMvBg4ANzXRA5Jve3qnz3iYMGE42pp6qyeUzNzf0Q8HXgFsKyJHJJ628jZO57VMz2RDRwLi4gvAicDh4A3Z+YtE80/MDCQg4ODtWSTpLkiIrZn5kD7eCN7/Jn5/CbWK0nyyl1JKo7FL0mFsfglqTAWvyQVxuKXpMJY/JJUGItfkgpj8UtSYSx+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IKY/FLUmGaevTim4DfARLYBfxWZv5vE1mk0m3euZd1W3az7+AwZyzoY+2KJaxcuqjpWOqg2vf4I2IR8HpgIDPPA+YBV9WdQ1Kr9K/ZtIu9B4dJYO/BYa7ZtIvNO/c2HU0d1NShnmOAvog4BjgO2NdQDqlo67bsZvjQ4SeNDR86zLotuxtKpDrUXvyZuRd4J/AA8BDw3cy8qX2+iFgTEYMRMTg0NFR3TKkI+w4OT2tcc0MTh3pOAl4OPAM4Azg+In69fb7MXJ+ZA5k50N/fX3dMqQhnLOib1rjmhiYO9bwQ+FpmDmXmIWAT8LwGckjFW7tiCX3z5z1prG/+PNauWNJQItWhibN6HgAuiojjgGHgMmCwgRxS8UbO3vGsnrLUXvyZeUdEfALYATwK7ATW151DUsvKpYss+sI0ch5/Zl4LXNvEuiWpdF65K0mFsfglqTAWvyQVxuKXpMJY/JJUGItfkgpj8UtSYSx+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IKY/FLUmFqvx9/RCwBPjpq6JnAn2bmu+vOInXKi951K/ftf+Tx1+ecejw3v/mS5gJJo9S+x5+ZuzPz/Mw8H/gZ4AfAjXXnkDqlvfQB7tv/CC96163NBJLaNH2o5zJgT2Z+veEc0qxpL/3JxqW6NV38VwE3jPVGRKyJiMGIGBwaGqo5liTNXY0Vf0QcC7wM+PhY72fm+swcyMyB/v7+esNJ0hzW5B7/FcCOzPxWgxmkWXfOqcdPa1yqW5PFfzXjHOaRetnNb77kiJL3rB51k9pP5wSIiOOAFwGvbmL9UqdZ8upmjRR/Zv4AOLmJdUtS6Zo+q0eSVDOLX5IKY/FLUmEsfkkqjMUvSYWx+CWpMBa/JBVm3PP4I+K9QI73fma+viOJJEkdNdEFXIO1pZAk1Wbc4s/M6+sMIkmqx6S3bIiIfuAtwLOAp46MZ+alHcwlSeqQqXy4uxG4F3gG8GfA/cCXO5hJktRBUyn+kzPzg8ChzPxCZr4KuKjDuSRJHTKVu3Meqr4/FBEvBfYBZ3YukiSpk6ZS/H8REU8D/gB4L3Ai8KaOppIkdcykxZ+Zn6kmvwu8oLNxJEmdNpWzev6OMS7kqo71z0hELACuA86rlv2qzNw20+WpTKs2bGPrngOPv15+9kI2rl7WYCKpN0zlw93PAJ+tvm6hdajn+0e53vcAn8vMnwSeQ+usIWnK2ksfYOueA6za4P6DNJmpHOr55OjXEXED8K8zXWFEnAhcDPxmtfwfAj+c6fJUpvbSn2xc0hNmcpO2c4CnH8U6nwkMAX8XETsj4rqIOL59pohYExGDETE4NDR0FKuTJI02afFHxMMR8b2RL+CfaF3JO1PHABcA78vMpcAjwFvbZ8rM9Zk5kJkD/f39R7E6SdJokxZ/Zp6QmSeO+jq3/fDPNH0D+EZm3lG9/gSt/wikKVt+9sJpjUt6wlT2+G+ZythUZeY3gQcjYkk1dBlwz0yXpzJtXL3siJL3rB5paia6H/9TgeOAUyLiJCCqt04EzjjK9b4O2BgRxwL/DfzWUS5PBbLkpZmZ6KyeVwNvpFXy23mi+L8H/O3RrDQz7wQGjmYZkqSZmeh+/O8B3hMRr8vM99aYSZLUQVM5nfOx6kpbACLipIj43c5FkiR10lSKf3VmHhx5kZnfAVZ3LJEkqaOmUvw/EhEjx/eJiHnAsZ2LJEnqpKnclnkL8LGIeD+tG6q9BviXjqaSJHXMVIr/LcAa4LW0zuzZCZzeyVCSpM6ZypW7jwG30zrffoDWBVfeTVOSetREF3CdC1wFXA38D/BRgMz0YSyS1MMmOtTzVeCLwC9k5n8BRISPXJSkHjfRoZ5fAr4JfD4iNkTEZTxx9a4kqUeNW/yZeWNm/hrwk8CttB6wflpEvC8iXlxTPknSLJvKh7uPZObGzLwSOBO4kzHuny9J6g3TegJXZh7IzA9k5qWdCiRJ6qyZPHpRktTDLH5JKozFL0mFmcotG2ZdRNwPPAwcBh7NTB/K0iM279zLui272XdwmDMW9LF2xRJWLl3UdCxJ09BI8VdekJnfbnD9mqbNO/dyzaZdDB86DMDeg8Ncs2kXgOUv9RAP9WjK1m3Z/Xjpjxg+dJh1W3Y3lEjSTDRV/AncFBHbI2LNWDNExJqIGIyIwaGhoZrjaSz7Dg5Pa1xSd2qq+Jdn5gXAFcDvRcTF7TNk5vrMHMjMgf7+/voT6ghnLOib1rik7tRI8Wfmvur7fuBG4MImcmh61q5YQt/8eU8a65s/j7UrljSUSNJM1F78EXF8RJwwMg28GLi77hyavpVLF/GXr3g2ixb0EcCiBX385Sue7Qe7Uo9p4qye04Abq8f4HgN8JDM/10AOzcDKpYsseqnH1V78mfnfwHPqXq8kqcXTOSWpMBa/JBXG4pekwlj8klQYi1+SCmPxS1JhLH5JKozFL0mFsfglqTAWvyQVxuKXpMJY/JJUGItfkgpj8UtSYSx+SSpMEw9iASAi5gGDwN7MvLKpHL1m1YZtbN1z4PHXy89eyMbVyxpMJKnXNLnH/wbg3gbX33PaSx9g654DrNqwraFEknpRI8UfEWcCLwWua2L9vaq99Ccbl6SxNLXH/27gj4DHxpshItZExGBEDA4NDdUWTJLmutqLPyKuBPZn5vaJ5svM9Zk5kJkD/f39NaWTpLmviT3+5cDLIuJ+4B+BSyPiww3k6DnLz144rXFJGkvtxZ+Z12TmmZm5GLgK+LfM/PW6c/SijauXHVHyntUjaboaO51TM2PJSzpajRZ/Zt4K3NpkBkkqjVfuSlJhLH5JKozFL0mFsfglqTAWvyQVxuKXpMJY/JJUGItfkgpj8UtSYSx+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IKU/uDWCLiqcBtwFOq9X8iM6+tO8dsWbVhG1v3HHj8tY9ClNTtmtjj/z/g0sx8DnA+cHlEXNRAjqPWXvoAW/ccYNWGbQ0lkqTJ1b7Hn5kJfL96Ob/6yrpzzIb20p9sXJK6QSPH+CNiXkTcCewHbs7MO8aYZ01EDEbE4NDQUO0ZJWmuaqT4M/NwZp4PnAlcGBHnjTHP+swcyMyB/v7+2jNK0lzV6Fk9mXkQuBW4vMkcM7X87IXTGpekblB78UdEf0QsqKb7gBcCX607x2zYuHrZESXvWT2Sul3tH+4CpwPXR8Q8Wv/xfCwzP9NAjllhyUvqNU2c1fMVYGnd65UktXjlriQVxuKXpMJY/JJUGItfkgpj8UtSYSx+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IKY/FLUmEsfkkqjMUvSYWx+CWpMLU/iCUizgL+Afgx4DFgfWa+Z7bXs3nnXtZt2c2+g8OcsaCPtSuWsHLpotlejST1nCYevfgo8AeZuSMiTgC2R8TNmXnPbK1g8869XLNpF8OHDgOw9+Aw12zaBWD5Sype7Yd6MvOhzNxRTT8M3AvMahuv27L78dIfMXzoMOu27J7N1UhST2r0GH9ELKb1/N07xnhvTUQMRsTg0NDQtJa77+DwtMYlqSSNFX9E/CjwSeCNmfm99vczc31mDmTmQH9//7SWfcaCvmmNS1JJGin+iJhPq/Q3Zuam2V7+2hVL6Js/70ljffPnsXbFktlelST1nCbO6gngg8C9mfmuTqxj5ANcz+qRpCM1cVbPcuA3gF0RcWc19seZ+c+zuZKVSxdZ9JI0htqLPzO/BETd65UktXjlriQVxuKXpMJY/JJUGItfkgoTmdl0hklFxBDw9QlmOQX4dk1xZkuvZe61vGDmOvRaXui9zEeT98cz84grYHui+CcTEYOZOdB0junotcy9lhfMXIdeywu9l7kTeT3UI0mFsfglqTBzpfjXNx1gBnotc6/lBTPXodfyQu9lnvW8c+IYvyRp6ubKHr8kaYosfkkqTM8Vf0R8KCL2R8Tdo8YWRsTNEXFf9f2kJjO2Gyfzuoj4akR8JSJujIgFDUZ8krHyjnrvDyMiI+KUJrKNZ7zMEfG6iNgdEf8REe9oKl+7cf5NnB8Rt0fEndXT5y5sMuNoEXFWRHw+Iu6tfpZvqMa7dtubIHM3b3tjZh71/uxsf5nZU1/AxcAFwN2jxt4BvLWafivw9qZzTiHzi4Fjqum3d1PmsfJW42cBW2hdTHdK0zmn8DN+AfCvwFOq16c2nXOSvDcBV1TTLwFubTrnqGynAxdU0ycA/wk8q5u3vQkyd/O2N2bm6vWsbX89t8efmbcBB9qGXw5cX01fD6ysM9NkxsqcmTdl5qPVy9uBM2sPNo5xfsYAfw38EdB1ZwSMk/m1wF9l5v9V8+yvPdg4xsmbwInV9NOAfbWGmkBmPpSZO6rph4F7gUV08bY3XuYu3/bG+znDLG5/PVf84zgtMx+C1g8OOLXhPNP1KuBfmg4xkYh4GbA3M+9qOss0nAs8PyLuiIgvRMRzmw40iTcC6yLiQeCdwDXNxhlbRCwGlgJ30CPbXlvm0bp22xudeba3vyaewKVRIuJPgEeBjU1nGU9EHAf8Ca1fkXvJMcBJwEXAc4GPRcQzs/q9uQu9FnhTZn4yIn6V1iNKX9hwpieJiB+l9bzsN2bm91pPUu1u7ZlHjXfttjc6M62Ms7r9zZU9/m9FxOkA1feu+ZV+IhHxSuBKYFUXlxHA2cAzgLsi4n5avxrviIgfazTV5L4BbMqWfwceo3XDq271SmBTNf1xoGs+3AWIiPm0ymhjZo7k7Optb5zMXb3tjZF51re/uVL8n6a10VB9/1SDWaYkIi4H3gK8LDN/0HSeiWTmrsw8NTMXZ+ZiWoV6QWZ+s+Fok9kMXAoQEecCx9Ldd2XcB/x8NX0pcF+DWZ4kWrv2HwTuzcx3jXqra7e98TJ387Y3VuaObH9Nf4o9g0+9bwAeAg5VP4DfBk4GbqG1odwCLGw65xQy/xfwIHBn9fX+pnNOlLft/fvpvrN6xvoZHwt8GLgb2AFc2nTOSfL+HLAduIvWseifaTrnqLw/R+tDxa+M+jf7km7e9ibI3M3b3piZ2+Y56u3PWzZIUmHmyqEeSdIUWfySVBiLX5IKY/FLUmEsfkkqjMWvIkTE4equl3dHxMerq5Fnuqy/j4hfrqavi4hnTTDvJRHxvBms4/5uuwOq5g6LX6UYzszzM/M84IfAa0a/GRHzZrLQzPydzLxnglkuAaZd/FInWfwq0ReBn6j2xj8fER8BdkXEvOpe7V+u7tX+amhdTRkRfxMR90TEZxl1I7KIuDUiBqrpyyNiR0TcFRG3VDfZeg3wpuq3jedHRH9EfLJax5cjYnn1Z0+OiJsiYmdEfADo/pvgqGd5kzYVJSKOAa4APlcNXQicl5lfi4g1wHcz87kR8RRga0TcROsOiUuAZwOnAfcAH2pbbj+wAbi4WtbCzDwQEe8Hvp+Z76zm+wjw15n5pYh4Oq37q/8UcC3wpcz884h4KbCmoz8IFc3iVyn6IuLOavqLtO6H8jzg3zPza9X4i4GfHjl+T+ue+OfQemjKDZl5GNgXEf82xvIvAm4bWVZmjvU8A2jdbfNZo+5qeWJEnFCt4xXVn/1sRHxnZn9NaXIWv0oxnJnnjx6oyveR0UPA6zJzS9t8L2Hyh1/EFOaB1uHVZZk5PEYW75+iWniMX3rCFuC11W1xiYhzI+J44DbgquozgNNpPdKx3Tbg5yPiGdWfXViNP0zrEXojbgJ+f+RFRJxfTd4GrKrGrqD1HAGpIyx+6QnX0Tp+vyNaD0H/AK3fim+kdffJXcD7gC+0/8HMHKJ1XH5TRNwFfLR665+AXxz5cBd4PTBQfXh8D0+cXfRnwMURsYPWIacHOvR3lLw7pySVxj1+SSqMxS9JhbH4JakwFr8kFcbil6TCWPySVBiLX5IK8//HrcG2OmeluQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=pred3,y=data.SortingTime)\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"Actual\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "bafde739",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.587779Z",
     "start_time": "2022-11-23T10:37:18.567575Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DeliveryTime</th>\n",
       "      <th>SortingTime</th>\n",
       "      <th>SortingTime_Sq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "      <td>36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    DeliveryTime  SortingTime  SortingTime_Sq\n",
       "0          21.00           10             100\n",
       "1          13.50            4              16\n",
       "2          19.75            6              36\n",
       "3          24.00            9              81\n",
       "4          29.00           10             100\n",
       "5          15.35            6              36\n",
       "6          19.00            7              49\n",
       "7           9.50            3               9\n",
       "8          17.90           10             100\n",
       "9          18.75            9              81\n",
       "10         19.83            8              64\n",
       "11         10.75            4              16\n",
       "12         16.68            7              49\n",
       "13         11.50            3               9\n",
       "14         12.03            3               9\n",
       "15         14.88            4              16\n",
       "16         13.75            6              36\n",
       "17         18.11            7              49\n",
       "18          8.00            2               4\n",
       "19         17.83            7              49\n",
       "20         21.50            5              25"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"SortingTime_Sq\"] = data.SortingTime*data.SortingTime\n",
    "data  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b6954b8",
   "metadata": {},
   "source": [
    "# 4th model (quadratic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "ca5b8f85",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.621696Z",
     "start_time": "2022-11-23T10:37:18.590466Z"
    }
   },
   "outputs": [],
   "source": [
    "model_quad = smf.ols(\"np.log(DeliveryTime)~SortingTime+SortingTime_Sq\",data=data).fit() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "c7dd7adb",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.646578Z",
     "start_time": "2022-11-23T10:37:18.625840Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>    <td>np.log(DeliveryTime)</td> <th>  R-squared:         </th> <td>   0.765</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                     <td>OLS</td>         <th>  Adj. R-squared:    </th> <td>   0.739</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>Least Squares</td>    <th>  F-statistic:       </th> <td>   29.28</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>               <td>Wed, 23 Nov 2022</td>   <th>  Prob (F-statistic):</th> <td>2.20e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                   <td>16:07:18</td>       <th>  Log-Likelihood:    </th> <td>  9.9597</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>        <td>    21</td>        <th>  AIC:               </th> <td>  -13.92</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>            <td>    18</td>        <th>  BIC:               </th> <td>  -10.79</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>                <td>     2</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>nonrobust</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "         <td></td>           <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>      <td>    1.6997</td> <td>    0.228</td> <td>    7.441</td> <td> 0.000</td> <td>    1.220</td> <td>    2.180</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>SortingTime</th>    <td>    0.2659</td> <td>    0.080</td> <td>    3.315</td> <td> 0.004</td> <td>    0.097</td> <td>    0.434</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>SortingTime_Sq</th> <td>   -0.0128</td> <td>    0.006</td> <td>   -2.032</td> <td> 0.057</td> <td>   -0.026</td> <td>    0.000</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 2.548</td> <th>  Durbin-Watson:     </th> <td>   1.369</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.280</td> <th>  Jarque-Bera (JB):  </th> <td>   1.777</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.708</td> <th>  Prob(JB):          </th> <td>   0.411</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.846</td> <th>  Cond. No.          </th> <td>    373.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                             OLS Regression Results                             \n",
       "================================================================================\n",
       "Dep. Variable:     np.log(DeliveryTime)   R-squared:                       0.765\n",
       "Model:                              OLS   Adj. R-squared:                  0.739\n",
       "Method:                   Least Squares   F-statistic:                     29.28\n",
       "Date:                  Wed, 23 Nov 2022   Prob (F-statistic):           2.20e-06\n",
       "Time:                          16:07:18   Log-Likelihood:                 9.9597\n",
       "No. Observations:                    21   AIC:                            -13.92\n",
       "Df Residuals:                        18   BIC:                            -10.79\n",
       "Df Model:                             2                                         \n",
       "Covariance Type:              nonrobust                                         \n",
       "==================================================================================\n",
       "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
       "----------------------------------------------------------------------------------\n",
       "Intercept          1.6997      0.228      7.441      0.000       1.220       2.180\n",
       "SortingTime        0.2659      0.080      3.315      0.004       0.097       0.434\n",
       "SortingTime_Sq    -0.0128      0.006     -2.032      0.057      -0.026       0.000\n",
       "==============================================================================\n",
       "Omnibus:                        2.548   Durbin-Watson:                   1.369\n",
       "Prob(Omnibus):                  0.280   Jarque-Bera (JB):                1.777\n",
       "Skew:                           0.708   Prob(JB):                        0.411\n",
       "Kurtosis:                       2.846   Cond. No.                         373.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "917bd42e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.661674Z",
     "start_time": "2022-11-23T10:37:18.647922Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     21.646921\n",
       "1     12.909227\n",
       "2     16.995933\n",
       "3     21.176938\n",
       "4     21.646921\n",
       "5     16.995933\n",
       "6     18.764526\n",
       "7     10.825502\n",
       "8     21.646921\n",
       "9     21.176938\n",
       "10    20.191891\n",
       "11    12.909227\n",
       "12    18.764526\n",
       "13    10.825502\n",
       "14    10.825502\n",
       "15    12.909227\n",
       "16    16.995933\n",
       "17    18.764526\n",
       "18     8.847949\n",
       "19    18.764526\n",
       "20    15.003730\n",
       "dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_quad = model_quad.predict(data)\n",
    "pred4=np.exp(pred_quad)  \n",
    "pred4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "99fce2ae",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.688235Z",
     "start_time": "2022-11-23T10:37:18.664631Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    -0.030341\n",
       "1     0.044747\n",
       "2     0.150179\n",
       "3     0.125141\n",
       "4     0.292433\n",
       "5    -0.101859\n",
       "6     0.012471\n",
       "7    -0.130613\n",
       "8    -0.190063\n",
       "9    -0.121719\n",
       "10   -0.018085\n",
       "11   -0.183037\n",
       "12   -0.117758\n",
       "13    0.060442\n",
       "14    0.105499\n",
       "15    0.142076\n",
       "16   -0.211935\n",
       "17   -0.035504\n",
       "18   -0.100744\n",
       "19   -0.051086\n",
       "20    0.359754\n",
       "dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.resid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c59df7c1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.703466Z",
     "start_time": "2022-11-23T10:37:18.691506Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.18653701,  0.27510944,  0.92331151,  0.76937448,  1.79789238,\n",
       "       -0.62623272,  0.0766711 , -0.80301506, -1.16851536, -0.74833548,\n",
       "       -0.11118848, -1.12531927, -0.72398172,  0.37160353,  0.64861345,\n",
       "        0.8734897 , -1.3029903 , -0.21828016, -0.61938087, -0.31407821,\n",
       "        2.21178906])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_quad.resid_pearson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "910291cc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.718974Z",
     "start_time": "2022-11-23T10:37:18.705563Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.7990419887409272"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rmse_quad = np.sqrt(np.mean((np.array(data['DeliveryTime'])-np.array(pred4))**2))\n",
    "rmse_quad "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a890e46b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:18.954632Z",
     "start_time": "2022-11-23T10:37:18.721140Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x23b3f3faa90>]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data.SortingTime,data.DeliveryTime,c=\"b\")\n",
    "plt.plot(data.SortingTime,pred4,\"r\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "15fd827b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:19.103678Z",
     "start_time": "2022-11-23T10:37:18.958823Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(model_quad.resid_pearson)\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "8ecfc921",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-23T10:37:19.127405Z",
     "start_time": "2022-11-23T10:37:19.106682Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MODEL</th>\n",
       "      <th>RMSE_Values</th>\n",
       "      <th>Rsquare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>rmse_lin</td>\n",
       "      <td>10.990922</td>\n",
       "      <td>0.682271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>rmse_log</td>\n",
       "      <td>10.749542</td>\n",
       "      <td>0.695443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>rmse_exp</td>\n",
       "      <td>2.940250</td>\n",
       "      <td>0.710948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>rmse_quad</td>\n",
       "      <td>2.799042</td>\n",
       "      <td>0.764867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       MODEL  RMSE_Values   Rsquare\n",
       "0   rmse_lin    10.990922  0.682271\n",
       "1   rmse_log    10.749542  0.695443\n",
       "2   rmse_exp     2.940250  0.710948\n",
       "3  rmse_quad     2.799042  0.764867"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {\"MODEL\":pd.Series([\"rmse_lin\",\"rmse_log\",\"rmse_exp\",\"rmse_quad\"]),\n",
    "        \"RMSE_Values\":pd.Series([rmse_lin,rmse_log,rmse_exp,rmse_quad]),\n",
    "        \"Rsquare\":pd.Series([model.rsquared,model2.rsquared,model3.rsquared,model_quad.rsquared])}\n",
    "table=pd.DataFrame(data)\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "974acdd7",
   "metadata": {},
   "source": [
    "conclusion: Here exponential model is the better model "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
